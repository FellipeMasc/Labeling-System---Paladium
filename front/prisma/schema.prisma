generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["typedSql"]
}

generator zod {
  provider         = "zod-prisma-types"
  output           = "./zod"
  createInputTypes = "false"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id
  name          String
  email         String
  emailVerified Boolean        @default(false)
  image         String?
  admin         Boolean        @default(false)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @default(now()) @updatedAt
  sessions      Session[]
  accounts      Account[]
  groupMembers  GroupMember[]
  labelerUsage  LabelerUsage[]
  tags          Tag[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("verification")
}

model Group {
  id          String        @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime      @default(now())
  members     GroupMember[]
  images      Image[]

  @@index([name])
  @@map("group")
}

model GroupMember {
  id       String   @id @default(cuid())
  userId   String
  groupId  String
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  group    Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  joinedAt DateTime @default(now())

  @@unique([userId, groupId])
  @@index([userId])
  @@index([groupId])
  @@map("group_member")
}

model Image {
  id           String         @id @default(cuid())
  filename     String
  originalName String
  url          String
  groupId      String
  status       ImageStatus    @default(UNLABELED)
  group        Group          @relation(fields: [groupId], references: [id], onDelete: Cascade)
  tags         Tag[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  labelerUsage LabelerUsage[]

  @@index([groupId])
  @@index([status])
  @@map("image")
}

enum ImageStatus {
  UNLABELED
  LABELED
  REVIEWED
}

model Tag {
  id          String    @id @default(cuid())
  value       String
  source      TagSource
  createdBy   User      @relation(fields: [createdById], references: [id], onDelete: Cascade)
  createdById String
  imageId     String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  image       Image     @relation(fields: [imageId], references: [id], onDelete: Cascade)

  @@index([imageId])
  @@index([createdById])
  @@index([source])
  @@map("tag")
}

enum TagSource {
  USER
  AI
  ADMIN
}

model LabelerUsage {
  id        String   @id @default(cuid())
  userId    String
  imageId   String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  image     Image    @relation(fields: [imageId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, imageId])
  @@index([userId])
  @@index([imageId])
  @@map("labeler_usage")
}
